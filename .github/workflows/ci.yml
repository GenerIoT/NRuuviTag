name: CI/CD

on:
  # Trigger on pushes to branch for deployment (excluding docs)
  push:
    paths-ignore: 
      # Documentation files
      - '**/*.md'         
      - 'docs/**'         
      
      # Git files 
      - '.gitignore'      
      - '.gitattributes'   
      - '.gitmodules'      
      
      # Editor/IDE configuration 
      - '.editorconfig'   

      # License files
      - 'LICENSE*'       
      - 'THIRD-PARTY-NOTICES.md'

  # Trigger on pull requests for validation (excluding docs)  
  pull_request:
    types: [opened, reopened]
    branches: [ main, master ]
    paths-ignore: 
    - '**/*.md'         
    - 'docs/**'         
      
      # Git files 
    - '.gitignore'       
    - '.gitattributes'   
    - '.gitmodules'      
      
      # Editor/IDE configuration 
    - '.editorconfig'   

      # License files (2 files)  
    - 'LICENSE*'       
    - 'THIRD-PARTY-NOTICES.md'

permissions:
  actions: read  # Required to run actions
  contents: write
  packages: write  # Required to push to GitHub Container Registry


env:
  TARGET_BRANCH: ${{ vars.TARGET_DEPLOYMENT_BRANCH || 'main' }}
  CAKE_VERSION: ${{ vars.CAKE_VERSION || '1.1.0' }}
  BUILD_CONFIGURATION: ${{ vars.BUILD_CONFIGURATION || 'Release' }}

  
jobs:
  # Job 0: Check if we need to run tests
  check-test-needed:
    runs-on: ubuntu-latest
    outputs:
      should-test: ${{ steps.check.outputs.should-test }}
      commit-sha: ${{ steps.check.outputs.commit-sha }}
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Check if tests are needed
      id: check
      run: |
        # - Push events: Always run tests (new code needs validation)
        # - Pull requests: Skip if the same commit was already tested on push
        # - Other events: Run tests for safety

        if [ "${{ github.event_name }}" == "push" ]; then
          echo "should-test=true" >> $GITHUB_OUTPUT
          echo "commit-sha=${{ github.sha }}" >> $GITHUB_OUTPUT
          echo " Push event: Running tests"
          
        elif [ "${{ github.event_name }}" == "pull_request" ]; then
          # Check if this commit was already tested in a recent push
          COMMIT_SHA="${{ github.event.pull_request.head.sha }}"
          echo "commit-sha=$COMMIT_SHA" >> $GITHUB_OUTPUT
          
          # Check if there's a recent successful workflow for this commit
          RECENT_RUN=$(gh run list \
            --repo ${{ github.repository }} \
            --workflow "${{ github.workflow }}" \
            --event push \
            --status success \
            --limit 10 \
            --json headSha,conclusion \
            --jq ".[] | select(.headSha == \"$COMMIT_SHA\" and .conclusion == \"success\") | .headSha" || echo "")
          
          if [ -n "$RECENT_RUN" ]; then
            echo "should-test=false" >> $GITHUB_OUTPUT
            echo "PR: Commit $COMMIT_SHA was already tested successfully - skipping"
          else
            echo "should-test=true" >> $GITHUB_OUTPUT
            echo "PR: Commit $COMMIT_SHA not recently tested - running tests"
          fi
        else
          echo "should-test=true" >> $GITHUB_OUTPUT
          echo "Other event: Running tests"
        fi
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
  # Job 1: Build and Test (runs on ALL branches)
  build-and-test:
    runs-on: ubuntu-latest
    needs: check-test-needed
    if: needs.check-test-needed.outputs.should-test == 'true'
    
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive   # Required for version comparison

    # Setup Cake
    - name: Setup Cake
      uses: cake-build/cake-action@v3
      with:
        version: ${{env.CAKE_VERSION}}

    - name: Make build.sh executable
      run: |
        chmod +x build.sh

    # Build .NET
    - name: Build .NET
      run: |
        ./build.sh --target=Build --configuration=${{ env.BUILD_CONFIGURATION }}

    # Run Tests
    - name: Run Tests
      run: |
        ./build.sh --target=Test --configuration=${{ env.BUILD_CONFIGURATION }}

  #Job 2: Version Bump (runs only on main branch)
  version-bump:
    runs-on: ubuntu-latest
    needs: build-and-test

   # Only run on push events to main branch (not PRs or other branches)
    if: github.event_name == 'push' && 
        github.ref == format('refs/heads/{0}', vars.TARGET_DEPLOYMENT_BRANCH || 'main')
  
    steps: 
    - uses: actions/checkout@v2
      with:
        submodules: recursive
    
    - name: Automatic versioning 
      run: |
        MAJOR=$(jq -r '.Major' build/version.json)
        MINOR=$(jq -r '.Minor' build/version.json)
        PATCH=$(jq -r '.Patch' build/version.json)

        if [ $PATCH -eq 99 ]; then
          MINOR=$((MINOR + 1))
          PATCH=0
          jq --arg new_minor "$MINOR" --arg new_patch "0" '.Minor = ($new_minor | tonumber) | .Patch = 0' build/version.json > build/version.tmp.json
        else
          PATCH=$((PATCH + 1))
          jq --arg new_patch "$PATCH" '.Patch = ($new_patch | tonumber)' build/version.json > build/version.tmp.json
        fi

        echo "New version: $MAJOR.$MINOR.$PATCH"
        jq empty build/version.tmp.json  # Validate JSON is valid
        mv build/version.tmp.json build/version.json

        git config --global user.name "${{ github.actor }}"
        git config --global user.email "${{ github.actor }}@users.noreply.github.com"
        git add build/version.json
        git commit -m "Bump version to $MAJOR.$MINOR.$PATCH [skip ci]"
        
        # Pull any remote changes before pushing to avoid conflicts
        git pull --rebase origin ${{ env.TARGET_BRANCH }} --no-edit
        git push origin ${{ env.TARGET_BRANCH }}
        

  # Job 3: Build and Push Container (ONLY on main branch pushes)
  build-and-push-container:
    runs-on: ubuntu-latest
    needs: version-bump
    
   # Only run on push events to main branch (not PRs or other branches)
    if: github.event_name == 'push' && 
        github.ref == format('refs/heads/{0}', vars.TARGET_DEPLOYMENT_BRANCH || 'main')

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive
        ref: ${{ env.TARGET_BRANCH }}  # Ensure we get the latest main branch with version bump

    # Setup Cake
    - name: Setup Cake
      uses: cake-build/cake-action@v3
      with:
        version: ${{ env.CAKE_VERSION }}

    - name: Make build.sh executable
      run: |
        chmod +x build.sh

    # Build .NET (required before container build)
    - name: Build .NET
      run: |
        ./build.sh --target=Build --configuration=${{ env.BUILD_CONFIGURATION }}

    # Login to Azure Container Registry
    - name: Log in to Azure Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ secrets.REGISTRY }}
        username: ${{ secrets.AZ_NRUUVITAG_USERNAME }}
        password: ${{ secrets.AZ_NRUUVITAG_PASS }}

    # Build Container at local 
    - name: Build and Push Container at local daemon
      run: |
        ./build.sh --target=PublishContainer --configuration=${{ env.BUILD_CONFIGURATION }} \
        --property="ContainerRepository=${{ secrets.IMAGE_NAME }}"
    
    - name: Extract version and tag Docker image
      run: |
        MAJOR=$(jq -r '.Major' build/version.json)
        MINOR=$(jq -r '.Minor' build/version.json)
        PATCH=$(jq -r '.Patch' build/version.json)
        VERSION="$MAJOR.$MINOR.$PATCH"
        
        echo "Tagging and pushing version: $VERSION"
        
        # Tag with version number
        docker tag ${{ secrets.IMAGE_NAME }}:$VERSION ${{ secrets.REGISTRY }}/${{ secrets.IMAGE_NAME }}:$VERSION
        
        # Push tag
        docker push ${{ secrets.REGISTRY }}/${{ secrets.IMAGE_NAME }}:$VERSION
