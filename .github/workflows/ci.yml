name: CI/CD

on:
  # Trigger on pushes to any branch (sync always runs, but build/test may be skipped)
  push:

  # Trigger on pull requests for validation
  pull_request:
    types: [opened, reopened]
    branches: [main, master]

permissions:
  actions: read
  contents: write
  packages: write  

env:
  # Vars
  TARGET_BRANCH: ${{ vars.TARGET_DEPLOYMENT_BRANCH || 'main' }}
  CAKE_VERSION: ${{ vars.CAKE_VERSION || '1.1.0' }}
  BUILD_CONFIGURATION: ${{ vars.BUILD_CONFIGURATION || 'Release' }}
  # Secrets
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  REGISTRY: ${{ secrets.REGISTRY }}
  USERNAME: ${{ secrets.AZ_NRUUVITAG_USERNAME }}
  PASSWORD: ${{ secrets.AZ_NRUUVITAG_PASS }}
  IMAGE_NAME: ${{ secrets.IMAGE_NAME }}

jobs:
  # Job 0: Check if we need to run tests
  check-test-needed:
    runs-on: ubuntu-latest
    outputs:
      should-test: ${{ steps.check.outputs.should-test }}
      commit-sha: ${{ steps.check.outputs.commit-sha }}
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Check if tests are needed
      id: check
      run: |
        # - Push events: Skip tests if only docs/config files changed
        # - Pull requests: Skip if the same commit was already tested on push
        # - Other events: Run tests for safety

        if [ "${{ github.event_name }}" == "push" ]; then

          CHANGED_FILES=$(git diff-tree --no-commit-id --name-only -r ${{ github.sha }})
          DOC_PATTERNS="\.md$ docs/ \.gitignore$ \.gitattributes$ \.gitmodules$ \.editorconfig$ LICENSE THIRD-PARTY-NOTICES\.md$"
          
          # Check if any non-doc files were changed
          NON_DOC_CHANGED=false
          while IFS= read -r file; do
            is_doc=false
            for pattern in $DOC_PATTERNS; do
              if echo "$file" | grep -qE "$pattern"; then
                is_doc=true
                break
              fi
            done
            if [ "$is_doc" = false ]; then
              NON_DOC_CHANGED=true
              break
            fi
          done <<< "$CHANGED_FILES"
          
          if [ "$NON_DOC_CHANGED" = true ]; then
            echo "should-test=true" >> $GITHUB_OUTPUT
            echo "commit-sha=${{ github.sha }}" >> $GITHUB_OUTPUT
            echo "Push event: Code changes detected - running tests"
          else
            echo "should-test=false" >> $GITHUB_OUTPUT
            echo "commit-sha=${{ github.sha }}" >> $GITHUB_OUTPUT
            echo "Push event: Only docs/config files changed - skipping tests"
          fi
          
        elif [ "${{ github.event_name }}" == "pull_request" ]; then
          # Check if this commit was already tested in a recent push
          COMMIT_SHA="${{ github.event.pull_request.head.sha }}"
          echo "commit-sha=$COMMIT_SHA" >> $GITHUB_OUTPUT
          
          # Check if there's a recent successful workflow for this commit
          RECENT_RUN=$(gh run list \
            --repo ${{ github.repository }} \
            --workflow "${{ github.workflow }}" \
            --event push \
            --status success \
            --limit 10 \
            --json headSha,conclusion \
            --jq ".[] | select(.headSha == \"$COMMIT_SHA\" and .conclusion == \"success\") | .headSha" || echo "")
          
          if [ -n "$RECENT_RUN" ]; then
            echo "should-test=false" >> $GITHUB_OUTPUT
            echo "PR: Commit $COMMIT_SHA was already tested successfully - skipping"
          else
            echo "should-test=true" >> $GITHUB_OUTPUT
            echo "PR: Commit $COMMIT_SHA not recently tested - running tests"
          fi
        else
          echo "should-test=true" >> $GITHUB_OUTPUT
          echo "Other event: Running tests"
        fi
        
  # Job 1: Build and Test (runs on ALL branches)
  build-and-test:
    runs-on: ubuntu-latest
    needs: check-test-needed
    if: needs.check-test-needed.outputs.should-test == 'true'
    
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive   # Required for version comparison

    # Cache .NET packages and build artifacts
    - name: Cache .NET packages
      uses: actions/cache@v3
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj', '**/Directory.Packages.props') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    # Cache Cake tools
    - name: Cache Cake tools
      uses: actions/cache@v3
      with:
        path: tools
        key: ${{ runner.os }}-cake-tools-${{ hashFiles('build.cake') }}
        restore-keys: |
          ${{ runner.os }}-cake-tools-

    # Setup Cake
    - name: Setup Cake
      uses: cake-build/cake-action@v3
      with:
        version: ${{env.CAKE_VERSION}}

    - name: Make build.sh executable
      run: |
        chmod +x build.sh

    # Build .NET
    - name: Build .NET
      run: |
        ./build.sh --target=Build --configuration=${{ env.BUILD_CONFIGURATION }}

    # Run Tests
    - name: Run Tests
      run: |
        ./build.sh --target=Test --configuration=${{ env.BUILD_CONFIGURATION }}
  
  sync-to-azure-devops:
    # Only sync if something is being pushed, not if e.g. PR created
    if: github.event_name == 'push'
    uses: ./.github/workflows/repo-sync.yml
    # Wait for the following jobs to be finished/skipped
    needs: [check-test-needed, build-and-test]
    secrets: inherit
