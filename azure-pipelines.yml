trigger:
  branches:
    include:
      - '*'  # all branches

pr:
  branches:
    include:
      - main
      - master

pool:
  vmImage: 'ubuntu-latest'

variables:
  - group: Basic
  - name: PATH_FILTER
    value: |
      **/*.md
      docs/*
      .gitignore
      .gitattributes
      .gitmodules
      .editorconfig
      LICENSE*
      THIRD-PARTY-NOTICES.md

stages:
  - stage: CheckFileChanges
    displayName: "Check if critical files are changed"
    condition: always()
    jobs:
      - job: CheckFiles
        displayName: "Check Files For Changes"
        steps:
          - bash: |
              PATH_FILTER="$(PATH_FILTER)"
              CHANGED_FILES=$(git diff HEAD HEAD~ --name-only)
              MATCH_COUNT=0

              echo "Checking for file changes..."
              for FILE in $CHANGED_FILES
              do
                if [[ $FILE != *$PATH_FILTER* ]]; then
                  echo "MATCH:  ${FILE} changed"
                  MATCH_COUNT=$(($MATCH_COUNT+1))
                else
                  echo "IGNORE: ${FILE} changed"
                fi
              done

              echo "$MATCH_COUNT match(es) for filter '$PATH_FILTER' found."
              if [[ $MATCH_COUNT -gt 0 ]]; then
                echo "##vso[task.setvariable variable=SOURCE_CODE_CHANGED;isOutput=true]true"
              else
                echo "##vso[task.setvariable variable=SOURCE_CODE_CHANGED;isOutput=true]false"
              fi            

  - stage: BuildAndTest
    displayName: "Build and Test"
    dependsOn: CheckFileChanges
    condition: eq(dependencies.CheckChanges.outputs['check_changes.SOURCE_CODE_CHANGED'], 'true')
    jobs: 
      - template: templates/build-test.yml

  - stage: VersionBump
    displayName: "Version Bump"
    dependsOn: BuildAndTest
    condition: and(succeeded('BuildAndTest'), eq(variables['Build.SourceBranch'], format('refs/heads/{0}', variables['TARGET_BRANCH'])), eq(variables['Build.Reason'], 'IndividualCI'))
    jobs:
      - template: templates/version-bump.yml

  - stage: Container
    displayName: "Build and Push Container"
    dependsOn: VersionBump
    condition: and(succeeded('VersionBump'),eq(variables['Build.SourceBranch'], format('refs/heads/{0}', variables['TARGET_BRANCH'])), eq(variables['Build.Reason'], 'IndividualCI'))
    variables:
      VERSION: $[ stageDependencies.VersionBump.version_bump.outputs['SetVersion.version'] ]
    jobs:
      - template: templates/build-push-container.yml
  
  - stage: iot_hub_deployment 
    displayName: "IoT Hub Deployment"
    dependsOn: [VersionBump, Container]
    condition: and(succeeded('VersionBump'), succeeded('Container'))
    variables:
      VERSION: $[ stageDependencies.VersionBump.version_bump.outputs['SetVersion.version'] ]
    jobs: 
      - template: templates/iot-hub-deployment.yml

  - stage: SyncRepo
    displayName: "Sync to GitHub"
    dependsOn: [CheckFileChanges, VersionBump]
    # Only sync after VersionBump to also sync any newly created version commits (back) to GitHub
    # Run despite skipped jobs in dependencies
    condition: and(not(or(failed(), canceled())), eq(variables['Build.Reason'], 'IndividualCI'))
    jobs:
      - template: templates/repo-sync.yml
