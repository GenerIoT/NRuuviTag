trigger:
  branches:
    include:
      - '*'  # all branches

pr:
  branches:
    include:
      - main
      - master

pool:
  vmImage: 'ubuntu-latest'

variables:
  - group: Basic

stages:
  - stage: BuildAndTest
    displayName: "Build and Test"
    condition: always()
    jobs: 
      - template: templates/build-test.yml

  - stage: VersionBump
    displayName: "Version Bump"
    dependsOn: BuildAndTest
    condition: and(succeeded('BuildAndTest'), eq(variables['Build.SourceBranch'], format('refs/heads/{0}', variables['TARGET_BRANCH'])), eq(variables['Build.Reason'], 'IndividualCI'))
    jobs:
      - template: templates/version-bump.yml

  - stage: Container
    displayName: "Build and Push Container"
    dependsOn: VersionBump
    condition: and(succeeded('VersionBump'),eq(variables['Build.SourceBranch'], format('refs/heads/{0}', variables['TARGET_BRANCH'])), eq(variables['Build.Reason'], 'IndividualCI'))
    variables:
      VERSION: $[ stageDependencies.VersionBump.version_bump.outputs['SetVersion.version'] ]
    jobs:
      - template: templates/build-push-container.yml
  
  - stage: iot_hub_deployment 
    displayName: "IoT Hub Deployment"
    dependsOn: [VersionBump, Container]
    condition: and(succeeded('VersionBump'), succeeded('Container'))
    variables:
      VERSION: $[ stageDependencies.VersionBump.version_bump.outputs['SetVersion.version'] ]
    jobs: 
      - template: templates/iot-hub-deployment.yml

  - stage: SyncRepo
    displayName: "Sync to GitHub"
    dependsOn: [BuildAndTest, VersionBump]
    # Only sync after VersionBump to also sync any newly created version commits (back) to GitHub
    # Run despite skipped jobs in dependencies
    condition: and(not(or(failed(), canceled())), eq(variables['Build.Reason'], 'IndividualCI'))
    jobs:
      - template: templates/repo-sync.yml
