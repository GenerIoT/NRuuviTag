using System;
using System.ComponentModel;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Text.Json;
using System.Threading.Tasks;

using Microsoft.Extensions.Hosting;

using Spectre.Console.Cli;

namespace NRuuviTag.Mqtt.Cli.Commands {

    /// <summary>
    /// <see cref="CommandApp"/> command for registering a known RuuviTag device.
    /// </summary>
    public class DeviceAddCommand : AsyncCommand<DeviceAddCommandSettings> {

        /// <summary>
        /// The <see cref="IHostEnvironment"/> for the .NET host application.
        /// </summary>
        private readonly IHostEnvironment _hostEnvironment;


        /// <summary>
        /// Creates a new <see cref="DeviceAddCommand"/> object.
        /// </summary>
        /// <param name="hostEnvironment">
        ///   The <see cref="IHostEnvironment"/> for the .NET host application. 
        /// </param>
        public DeviceAddCommand(IHostEnvironment hostEnvironment) {
            _hostEnvironment = hostEnvironment;
        }


        /// <inheritdoc/>
        public override async Task<int> ExecuteAsync(CommandContext context, DeviceAddCommandSettings settings) {
            var device = new Device() { 
                MacAddress = settings.MacAddress,
                DisplayName = settings.DisplayName
            };

            var deviceId = string.IsNullOrWhiteSpace(settings.DeviceId)
                ? MqttAgent.GetDefaultDeviceId(device.MacAddress)
                : settings.DeviceId!;

            var devicesJsonFile = CommandUtilities.GetDevicesJsonFile(_hostEnvironment);

            DeviceCollection? devices = null;

            if (devicesJsonFile.Exists) {
                // File already exists; we need to load the devices in, add the new device to the
                // collection, and write back to disk.
                string? json;
                using (var reader = devicesJsonFile.OpenText()) {
                    json = await reader.ReadToEndAsync().ConfigureAwait(false);
                }

                if (!string.IsNullOrWhiteSpace(json)) {
                    var config = JsonSerializer.Deserialize<JsonElement>(json);
                    if (config.ValueKind != JsonValueKind.Object) {
                        throw new InvalidOperationException(string.Format(CultureInfo.CurrentCulture, Resources.Error_InvalidDevicesJson, config.ValueKind));
                    }

                    if (config.TryGetProperty("Devices", out var devicesElement)) {
                        devices = JsonSerializer.Deserialize<DeviceCollection>(devicesElement.GetRawText());
                    }
                }
            }

            if (devices == null) {
                devices = new DeviceCollection();
            }

            // We need to ensure that we have not previously added another device with the same
            // MAC address but a different device ID.
            var existingWithSameMacAddress = devices.FirstOrDefault(x => string.Equals(x.Value.MacAddress, device.MacAddress, StringComparison.OrdinalIgnoreCase));
            if (existingWithSameMacAddress.Key != null && !string.Equals(existingWithSameMacAddress.Key, deviceId, StringComparison.Ordinal)) {
                throw new InvalidOperationException(string.Format(CultureInfo.CurrentCulture, Resources.Error_DeviceWithSameMacAlreadyRegistered, device.MacAddress));
            }

            // Update devices collection and save JSON file.

            devices[deviceId] = device;

            var updatedDeviceConfig = new {
                Devices = devices
            };

            using (var stream = devicesJsonFile.Open(FileMode.Create, FileAccess.Write)) {
                await JsonSerializer.SerializeAsync(stream, updatedDeviceConfig, new JsonSerializerOptions() { WriteIndented = true }).ConfigureAwait(false);
                await stream.FlushAsync().ConfigureAwait(false);
            }

            Console.WriteLine();
            Console.WriteLine(Resources.LogMessage_DeviceAdded);
            Console.WriteLine();
            CommandUtilities.PrintDeviceToConsole(device, deviceId);
            Console.WriteLine();

            return 0;
        }
    }


    /// <summary>
    /// Settings for <see cref="DeviceAddCommand"/>.
    /// </summary>
    public class DeviceAddCommandSettings : CommandSettings {

        [CommandArgument(0, "<MAC_ADDRESS>")]
        [Description("The MAC address of the device to add.")]
        public string MacAddress { get; set; } = default!;

        [CommandOption("--device-id <DEVICE_ID>")]
        [Description("The device ID to use when publishing samples to the MQTT broker. If not specified, the device ID will be generated by hashing the MAC address.")]
        public string? DeviceId { get; set; }

        [CommandOption("--name <NAME>")]
        [Description("The friendly name for the device.")]
        public string? DisplayName { get; set; }

    }
}
