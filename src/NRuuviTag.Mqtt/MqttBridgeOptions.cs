using System;

using MQTTnet.Formatter;

namespace NRuuviTag.Mqtt {

    /// <summary>
    /// Options for <see cref="MqttBridge"/>.
    /// </summary>
    public class MqttBridgeOptions {

        /// <summary>
        /// The default value for <see cref="TopicName"/>.
        /// </summary>
        /// <seealso cref="TopicName"/>
        public const string DefaultTopicName = "devices/{deviceId}";

        /// <summary>
        /// The MQTT connection type to use.
        /// </summary>
        public ConnectionType ConnectionType { get; set; }

        /// <summary>
        /// Broker hostname (and optional port).
        /// </summary>
        public string Hostname { get; set; } = "localhost";

        /// <summary>
        /// Specifies if TLS should be used for the MQTT connection.
        /// </summary>
        /// <remarks>
        ///   Note that TLS is enabled by default.
        /// </remarks>
        public bool UseTls { get; set; } = true;

        /// <summary>
        /// The MQTT client ID to use.
        /// </summary>
        public string ClientId { get; set; } = Guid.NewGuid().ToString("N");

        /// <summary>
        /// The user name for the connection.
        /// </summary>
        public string? UserName { get; set; }

        /// <summary>
        /// The password for the connection.
        /// </summary>
        public string? Password { get; set; }

        /// <summary>
        /// The MQTT protocol version to use.
        /// </summary>
        public MqttProtocolVersion ProtocolVersion { get; set; } = MqttProtocolVersion.V500;

        /// <summary>
        /// The publishing type for the <see cref="MqttBridge"/>.
        /// </summary>
        public PublishType PublishType { get; set; }

        /// <summary>
        /// The topic that MQTT messages will be published to. When <see cref="PublishType"/> is 
        /// <see cref="PublishType.TopicPerMeasurement"/>, the <see cref="TopicName"/> is 
        /// used as a prefix for the individual measurement channels.
        /// </summary>
        /// <remarks>
        ///   The topic name can include <c>{deviceId}</c> as a placeholder. At runtime, the 
        ///   placeholder will be replaced with the device ID for the sample that is being 
        ///   published. The <see cref="GetDeviceId"/> callback can be used to define the 
        ///   device ID to use for a given <see cref="RuuviTagSample"/>.
        /// </remarks>
        /// <seealso cref="DefaultTopicName"/>
        public string TopicName { get; set; } = DefaultTopicName;

        /// <summary>
        /// A callback that is used to generate the device ID to use for a given 
        /// <see cref="RuuviTagSample"/> object.
        /// </summary>
        /// <remarks>
        ///   If <see cref="GetDeviceId"/> is <see langword="null"/>, the device ID will be 
        ///   generated by hashing the <see cref="RuuviTagSample.MacAddress"/> property for an 
        ///   incoming sample.
        /// </remarks>
        public Func<RuuviTagSample, string>? GetDeviceId { get; set; }

        /// <summary>
        /// A callback that is used to prepare a sample prior to publishing it to an MQTT topic or 
        /// topics.
        /// </summary>
        /// <remarks>
        /// 
        /// <para>
        ///   Use the <see cref="PrepareForPublish"/> callback to modify a <see cref="RuuviTagSample"/> 
        ///   instance prior to it being published to the MQTT broker (e.g. to perform unit conversion). 
        ///   Set any property on a sample to its default value (i.e. <see langword="null"/> for nullable 
        ///   properties, or <see langword="default"/> for non-nullable properties) to exclude that 
        ///   property from the publish.
        /// </para>
        /// 
        /// <para>
        ///   Note that the <see cref="RuuviTagSample.MacAddress"/> and <see cref="RuuviTagSample.DataFormat"/> 
        ///   properties are never included in the published payload.
        /// </para>
        /// 
        /// </remarks>
        public Action<RuuviTagSample>? PrepareForPublish { get; set; }

    }

}
